# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# Ladan Salari Sharif
# Date: February 2015
# Goal: Create an input file for Abaqus for a perfect circular cross-section cylinder
#       to perform buckling analysis on a shell model
# Input: Beam length data from CT scan data
# Output: The input file for Abaqus simulation for all combinations of beam length and diameter
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
import re
import decimal
import math
import os


def write_header(output_file, job_name, sec_index, bar_index):
    output_file.write("*Heading\n")
    output_file.write(
        "** Job name: "
        + job_name
        + " Model name: Sec"
        + str(sec_index + 1)
        + "-bar"
        + str(bar_index)
        + "-mid\n"
    )
    output_file.write("** Generated by: Abaqus/CAE 6.14-1\n")
    output_file.write("*Preprint, echo=NO, model=NO, history=NO, contact=NO\n")
    output_file.write("**\n")
    output_file.write("** PARTS\n")
    output_file.write("**\n")
    output_file.write("*Part, name=PART-1\n")
    output_file.write("*Node\n")


def process_input(input_file_name, sec_index, bar_index):
    input_file = open(
        input_file_name, "r"
    )  # opens file with name of "Sec#-bar#-mid-PD.inp"
    lines = input_file.readlines()

    job_name = "Sec" + str(sec_index + 1) + "-bar" + str(bar_index) + "-mid-PD-Final"
    name_output_file = (
        "Sec" + str(sec_index + 1) + "-bar" + str(bar_index) + "-mid-PD-Final.inp"
    )
    output_file = open(
        name_output_file, "w"
    )  # open a file writting file with name of "sec1-....."
    write_header(output_file, job_name, sec_index, bar_index)
    for index, line in enumerate(lines):
        node_data = re.findall("(^\*Node.*$)", line + "", re.DOTALL)
        if node_data:
            begining_of_node = index

        element_data = re.findall("(^\*Element,\stype=S4R$)", line + "", re.DOTALL)
        if element_data:
            begining_of_element = index

        element_data_end = re.findall("(^\*End\sPart$)", line + "", re.DOTALL)
        if element_data_end:
            end_of_element = index

    minz_set = []
    maxz_set = []
    maxz = 0
    end_of_node = begining_of_element - 1
    element_ind_beg = begining_of_element + 1

    split_line = lines[element_ind_beg].split(",")
    element_num_beginning = decimal.Decimal(split_line[0])

    element_ind_end = end_of_element - 1
    split_line = lines[element_ind_end].split(",")
    element_num_ending = decimal.Decimal(split_line[0])

    split_line = lines[end_of_node].split(",")
    node_num_ending = decimal.Decimal(split_line[0])

    # split_line=lines[begining_of_node].split(',')
    # node_num_begining=decimal.Decimal(split_line[0])

    for k in range(begining_of_node + 1, end_of_node):
        split_line = lines[k].split(",")
        z = decimal.Decimal(split_line[-1])

        if z > maxz:
            maxz = z
    length = maxz
    for i in range(begining_of_node + 1, end_of_node + 1):
        output_file.write(lines[i])
        split_line = lines[i].split(",")
        z = decimal.Decimal(split_line[-1])
        node_num = split_line[0]
        if z <= 10e-7:
            minz_set.append(node_num)
        if z == maxz:
            maxz_set.append(node_num)

    output_file.write("*Element, type=S4R\n")
    for i in range(begining_of_element + 1, end_of_element):
        output_file.write(lines[i])

    output_file.write("*Nset, nset=Set-1, generate\n ")
    output_file.write(" 1, " + str(node_num_ending) + ",        1\n")
    output_file.write("*Elset, elset=Set-1, generate\n ")
    output_file.write("1, " + str(element_num_ending) + ",        1\n")
    output_file.write("** Section: Section-1\n")
    output_file.write("*Shell General Section, elset=Set-1, material=Material-1\n")
    output_file.write("0.001,\n")
    output_file.write("*End Part\n")
    output_file.write(
        "**\n**\n** ASSEMBLY\n**\n*Assembly, name=Assembly\n**\n*Instance, name=PART-1-1, part=PART-1\n*End Instance\n"
    )
    output_file.write("**\n*Node\n")
    output_file.write("1, 0, 0, 0\n")
    output_file.write("**\n*Node\n")
    output_file.write("2, 0, 0, 1.4\n")
    output_file.write("*Nset, nset=MINZ1\n1,\n")
    output_file.write("*Nset, nset=MAXZ1\n2,\n")
    output_file.write("*Nset, nset=MAXZ, instance=PART-1-1\n")
    for i, item in enumerate(maxz_set):
        output_file.write("%s," % item)
        if i % 16 == 15:
            output_file.write("\n")
    output_file.write("\n*Nset, nset=MAXZ1\n2,\n")
    output_file.write("*Nset, nset=MINZ, instance=PART-1-1\n")
    for i, item in enumerate(minz_set):
        output_file.write("%s," % item)
        if i % 16 == 15:
            output_file.write("\n")

    output_file.write("*Surface, type=NODE, name=MAXZ_CNS_, internal\nMAXZ, 1.\n")
    output_file.write("*Surface, type=NODE, name=MINZ_CNS_, internal\nMINZ, 1.\n")
    output_file.write("** Constraint: MAXZ\n")
    output_file.write(
        "*Coupling, constraint name=MAXZ, ref node=MAXZ1, surface=MAXZ_CNS_\n"
    )
    output_file.write("*Kinematic\n")
    output_file.write("** Constraint: MinZ\n")
    output_file.write(
        "*Coupling, constraint name=MinZ, ref node=MINZ1, surface=MINZ_CNS_\n"
    )
    output_file.write("*Kinematic\n")
    output_file.write("*End Assembly\n")
    output_file.write("** \n")
    output_file.write("** MATERIALS\n")
    output_file.write("** \n")
    output_file.write("*Material, name=Material-1\n")
    output_file.write("*Density\n")
    output_file.write("8.9e-06,\n")
    output_file.write("*Elastic\n 2.1e+08, 0.3\n** \n")
    output_file.write(
        "** BOUNDARY CONDITIONS\n**\n** Name: MinZ Type: Displacement/Rotation\n"
    )
    output_file.write(
        "*Boundary\nMINZ1, 1, 1\nMINZ1, 2, 2\nMINZ1, 3, 3\nMINZ1, 4, 4\nMINZ1, 5, 5\nMINZ1, 6, 6\n"
    )
    output_file.write(
        "** Name: MAXZ Type: Displacement/Rotation\n*Boundary\nMAXZ1, 4, 4\nMAXZ1, 5, 5\nMAXZ1, 6, 6\n"
    )
    output_file.write(
        "** ----------------------------------------------------------------\n"
    )
    output_file.write(
        "**\n** STEP: Static\n**\n*Step, name=Static, nlgeom=YES, inc=100000\n"
    )
    output_file.write(
        "*Static\n0.1, 1., 1e-05, 0.1\n**\n** LOADS\n**\n** Name: Preload   Type: Concentrated force\n*Cload, op=NEW\n"
    )
    output_file.write("MAXZ1, 1, -2.5\n")
    output_file.write("MAXZ1, 2, 0\n")
    output_file.write("MAXZ1, 3, -4.33\n")
    output_file.write(
        "** \n** OUTPUT REQUESTS\n**\n*Restart, write, frequency=0\n** \n** FIELD OUTPUT: F-Output-1\n** \n*Output, field, variable=PRESELECT\n** \n** HISTORY OUTPUT: H-Output-1\n** \n*Output, history, variable=PRESELECT\n*End Step\n"
    )
    output_file.write(
        "** ----------------------------------------------------------------\n** \n"
    )
    output_file.write(
        "** STEP: Buckling\n** \n*Step, name=Buckling, nlgeom=NO, perturbation\n"
    )
    output_file.write("*Buckle\n10, , 18, 30000\n** \n** BOUNDARY CONDITIONS\n** \n")
    output_file.write(
        "** Name: BC-1 Type: Displacement/Rotation\n*Boundary, op=NEW, load case=1\nMInZ1, 1, 1\nMInZ1, 2, 2\nMInZ1, 3, 3\nMInZ1, 4, 4\nMInZ1, 5, 5\nMInZ1, 6, 6\n"
    )
    output_file.write(
        "*Boundary, op=NEW, load case=2\nMINZ1, 1, 1\nMINZ1, 2, 2\nMINZ1, 3, 3\nMINZ1, 4, 4\nMINZ1, 5, 5\nMINZ1, 6, 6\n"
    )
    output_file.write(
        "** Name: MAXZ Type: Displacement/Rotation\n*Boundary, op=NEW, load case=1\nMAXZ1, 4, 4\nMAXZ1, 5, 5\nMAXZ1, 6, 6\n"
    )
    output_file.write(
        "*Boundary, op=NEW, load case=2\nMAXZ1, 4, 4\nMAXZ1, 5, 5\nMAXZ1, 6, 6\n"
    )
    output_file.write(
        "** \n** LOADS\n** \n** Name: Buckle   Type: Concentrated force\n*Cload, op=NEW\n"
    )
    output_file.write("MAXZ1, 1, -25\n")
    output_file.write("MAXZ1, 2, 0 \n")
    output_file.write("MAXZ1, 3,-43.30\n")
    output_file.write(
        "** \n** OUTPUT REQUESTS\n** \n*Restart, write, frequency=0\n** \n** FIELD OUTPUT: F-Output-2\n** \n*Output, field, variable=PRESELECT\n*End Step\n"
    )
    output_file.close()


length_file = open("length_file.txt", "w")
bar_indexes = [55, 43, 45, 30]
for sec_index in range(4):
    for bar_index in range(1, bar_indexes[sec_index]):
        input_file_name = (
            "Sec" + str(sec_index + 1) + "-bar" + str(bar_index) + "-mid-PD.inp"
        )
        if os.path.isfile(input_file_name):
            process_input(input_file_name, sec_index, bar_index)

        else:
            print("File not exist: " + input_file_name)
