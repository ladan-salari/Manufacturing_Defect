# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# Ladan Salari Sharif
# Date: February 2015
# Goal: Create an input file for Abaqus for all the cut beams from Nano-CT scan data, with loads applied at different angles, to perform buckling analysis on a shell model
# Input: .inp file prepared in Abaqus for a beam cut from Nano-CT data
# Output: The input file for Abaqus simulation for all the Nano-CT scan beams loaded at different angles
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------

import re
import decimal
import math
import os

# -------------------------------------------------------------------------
# Write header for ABAQUS input file
# -------------------------------------------------------------------------
def write_header(output_file, job_name, sec_index, bar_index):
    output_file.write("*Heading\n")
    output_file.write(
        "** Job name: "
        + job_name
        + " Model name: Sec"
        + str(sec_index + 1)
        + "-bar"
        + str(bar_index)
        + "-mid\n"
    )
    output_file.write("** Generated by: Abaqus/CAE 6.14-1\n")
    output_file.write("*Preprint, echo=NO, model=NO, history=NO, contact=NO\n")
    output_file.write("**\n")
    output_file.write("** PARTS\n")
    output_file.write("**\n")
    output_file.write("*Part, name=PART-1\n")
    output_file.write("*Node\n")


def process_input(input_file_name, sec_index, bar_index):
    input_file = open(input_file_name, "r")  # opens file with name of "Sec#-bar#-mid.inp"
    lines = input_file.readlines()

# Create input file for 20 different load cages
    for load_index in range(1, 21):
        job_name = (
            "Sec"
            + str(sec_index + 1)
            + "-bar"
            + str(bar_index)
            + "-mid-load"
            + str(load_index)
        )
        name_output_file = (
            "Sec"
            + str(sec_index + 1)
            + "-bar"
            + str(bar_index)
            + "-mid-load"
            + str(load_index)
            + ".inp"
        )
        output_file = open(
            name_output_file, "w"
        )  # open a file writing file with name of "Sec#-bar#-mid-load#.inp"
        write_header(output_file, job_name, sec_index, bar_index)
        for index, line in enumerate(lines):
            node_data = re.findall("(^\*\*NODE\sDATA\sEND$)", line + "", re.DOTALL)
            if node_data:
                end_of_node = index

            element_data = re.findall(
                "(^\*ELEMENT,\sTYPE=S3,\sELSET.*$)", line + "", re.DOTALL
            )
            if element_data:
                begining_of_element = index

            element_data_end = re.findall(
                "(^\*\*SHELL\sELEMENTS\s\(TRIANGULAR\)\s-\sContact\:.*$)",
                line + "",
                re.DOTALL,
            )
            if element_data_end:
                end_of_element = index

        minz_set = []
        maxz_set = []
        maxz = 0
        element_ind_beg = begining_of_element + 1
        split_line = lines[element_ind_beg].split(",")
        element_num_beginning = decimal.Decimal(split_line[0])
        element_ind_end = end_of_element - 1
        split_line = lines[element_ind_end].split(",")
        element_num_ending = decimal.Decimal(split_line[0])

        for k in range(31, end_of_node - 1):
            split_line = lines[k].split(",")
            z = decimal.Decimal(split_line[3])
            if z > maxz:
                maxz = z
        length = maxz
        for i in range(31, end_of_node - 1):
            output_file.write(lines[i])
            split_line = lines[i].split(",")
            z = decimal.Decimal(split_line[3])
            node_num = split_line[0]
            if z <= 10e-7:
                minz_set.append(node_num)
            if z == maxz:
                maxz_set.append(node_num)

        output_file.write("*Element, type=S3\n")
        for i in range(begining_of_element + 1, end_of_element):
            output_file.write(lines[i])

        output_file.write("*Elset, elset=SH_SAMPLE_WITH_MIDDLE_IN, generate\n ")
        output_file.write(
            str(element_num_beginning) + ", " + str(element_num_ending) + ",        1\n"
        )
        output_file.write("** Section: Section-1-SH_SAMPLE_WITH_MIDDE_IN\n")
        output_file.write(
            "*Shell General Section, elset=SH_SAMPLE_WITH_MIDDLE_IN, material=SM_SAMPLE\n"
        )
        output_file.write("0.001,\n")
        output_file.write("*End Part\n")
        output_file.write(
            "**\n**\n** ASSEMBLY\n**\n*Assembly, name=Assembly\n**\n*Instance, name=PART-1-1, part=PART-1\n*End Instance\n"
        )
        output_file.write("**\n*Node\n")
        output_file.write("1, 0, 0, 0\n")
        output_file.write("**\n*Node\n")
        output_file.write("2, 0, 0, 1.4\n")
        output_file.write("*Nset, nset=MAXZ, instance=PART-1-1\n")
        for i, item in enumerate(maxz_set):
            output_file.write("%s," % item)
            if i % 16 == 15:
                output_file.write("\n")
        output_file.write("\n*Nset, nset=MAXZ1\n2,\n")
        output_file.write("*Nset, nset=MInZ, instance=PART-1-1\n")
        for i, item in enumerate(minz_set):
            output_file.write("%s," % item)
            if i % 16 == 15:
                output_file.write("\n")
        output_file.write("\n*Nset, nset=MInZ1\n1,\n")
        output_file.write("*Surface, type=NODE, name=MAXZ_CNS_, internal\nMAXZ, 1.\n")
        output_file.write("*Surface, type=NODE, name=MInZ_CNS_, internal\nMInZ, 1.\n")
        output_file.write("** Constraint: MAXZ\n")
        output_file.write(
            "*Coupling, constraint name=MAXZ, ref node=MAXZ1, surface=MAXZ_CNS_\n"
        )
        output_file.write("*Kinematic\n")
        output_file.write("** Constraint: MInZ\n")
        output_file.write(
            "*Coupling, constraint name=MInZ, ref node=MInZ1, surface=MInZ_CNS_\n"
        )
        output_file.write("*Kinematic\n")
        output_file.write("*End Assembly\n")
        output_file.write("** \n")
        output_file.write("** MATERIALS\n")
        output_file.write("** \n")
        output_file.write("*Material, name=SM_SAMPLE\n")
        output_file.write("*Density\n")
        output_file.write("8.9e-06,\n")
        output_file.write("*Elastic\n 2.1e+08, 0.3\n** \n")
        output_file.write(
            "** BOUNDARY CONDITIONS\n**\n** Name: BC-1 Type: Displacement/Rotation\n"
        )
        output_file.write(
            "*Boundary\nMInZ1, 1, 1\nMInZ1, 2, 2\nMInZ1, 3, 3\nMInZ1, 4, 4\nMInZ1, 5, 5\nMInZ1, 6, 6\n"
        )
        output_file.write(
            "** Name: MAXZ Type: Displacement/Rotation\n*Boundary\nMAXZ1, 4, 4\nMAXZ1, 5, 5\nMAXZ1, 6, 6\n"
        )
        output_file.write(
            "** ----------------------------------------------------------------\n"
        )
        output_file.write(
            "**\n** STEP: Static\n**\n*Step, name=Static, nlgeom=YES, inc=100000\n"
        )
        output_file.write(
            "*Static\n0.1, 1., 1e-05, 0.1\n**\n** LOADS\n**\n** Name: Preload   Type: Concentrated force\n*Cload, op=NEW\n"
        )
        preload_x = (
            -5
            * math.cos(60 * math.pi / 180)
            * math.cos((load_index - 1) * 18 * math.pi / 180)
        )
        preload_y = (
            -5
            * math.cos(60 * math.pi / 180)
            * math.sin((load_index - 1) * 18 * math.pi / 180)
        )
        preload_z = -5 * math.sin(60 * math.pi / 180)
        output_file.write("MAXZ1, 1, " + str(preload_x) + "\n")
        output_file.write("MAXZ1, 2, " + str(preload_y) + "\n")
        output_file.write("MAXZ1, 3, " + str(preload_z) + "\n")
        output_file.write(
            "** \n** OUTPUT REQUESTS\n**\n*Restart, write, frequency=0\n** \n** FIELD OUTPUT: F-Output-1\n** \n*Output, field, variable=PRESELECT\n** \n** HISTORY OUTPUT: H-Output-1\n** \n*Output, history, variable=PRESELECT\n*End Step\n"
        )
        output_file.write(
            "** ----------------------------------------------------------------\n** \n"
        )
        output_file.write(
            "** STEP: Buckling\n** \n*Step, name=Buckling, nlgeom=NO, perturbation\n"
        )
        output_file.write(
            "*Buckle\n10, , 18, 30000\n** \n** BOUNDARY CONDITIONS\n** \n"
        )
        output_file.write(
            "** Name: BC-1 Type: Displacement/Rotation\n*Boundary, op=NEW, load case=1\nMInZ1, 1, 1\nMInZ1, 2, 2\nMInZ1, 3, 3\nMInZ1, 4, 4\nMInZ1, 5, 5\nMInZ1, 6, 6\n"
        )
        output_file.write(
            "*Boundary, op=NEW, load case=2\nMInZ1, 1, 1\nMInZ1, 2, 2\nMInZ1, 3, 3\nMInZ1, 4, 4\nMInZ1, 5, 5\nMInZ1, 6, 6\n"
        )
        output_file.write(
            "** Name: MAXZ Type: Displacement/Rotation\n*Boundary, op=NEW, load case=1\nMAXZ1, 4, 4\nMAXZ1, 5, 5\nMAXZ1, 6, 6\n"
        )
        output_file.write(
            "*Boundary, op=NEW, load case=2\nMAXZ1, 4, 4\nMAXZ1, 5, 5\nMAXZ1, 6, 6\n"
        )
        output_file.write(
            "** \n** LOADS\n** \n** Name: Buckle   Type: Concentrated force\n*Cload, op=NEW\n"
        )
        load_x = (
            -50
            * math.cos(60 * math.pi / 180)
            * math.cos((load_index - 1) * 18 * math.pi / 180)
        )
        load_y = (
            -50
            * math.cos(60 * math.pi / 180)
            * math.sin((load_index - 1) * 18 * math.pi / 180)
        )
        load_z = -50 * math.sin(60 * math.pi / 180)
        output_file.write("MAXZ1, 1, " + str(load_x) + "\n")
        output_file.write("MAXZ1, 2, " + str(load_y) + "\n")
        output_file.write("MAXZ1, 3, " + str(load_z) + "\n")
        output_file.write(
            "** \n** OUTPUT REQUESTS\n** \n*Restart, write, frequency=0\n** \n** FIELD OUTPUT: F-Output-2\n** \n*Output, field, variable=PRESELECT\n*End Step\n"
        )
        output_file.close()
    return length


length_file = open("length_file.txt", "w")
bar_indexes = [55, 43, 45, 30]
for sec_index in range(4):
    for bar_index in range(1, bar_indexes[sec_index]):
        input_file_name = (
            "Sec" + str(sec_index + 1) + "-bar" + str(bar_index) + "-mid.inp"
        )
        if os.path.isfile(input_file_name):
            length = process_input(input_file_name, sec_index, bar_index)
            print(length)
            length_file.write(input_file_name + " , " + str(length) + "\n")
        else:
            print("File not exist: " + input_file_name)
length_file.close()
